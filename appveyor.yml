version: '0.0.{build}'
image: Visual Studio 2019

# Setup environment
nuget:
  disable_publish_on_pr: true

pull_requests:
  do_not_increment_build_number: true

branches:
  except:
    - /tmp|temp/

skip_commits:
  files:
  - .github/
  - .gitattributes
  - .gitignore
  - LICENSE
  - README.md
  - CONTRIBUTING.md
  - ISSUE_TEMPLATE.md
  - CODE_OF_CONDUCT.md
  - '**/*.DotSettings'

environment:
  DocFXVersion: 2.58
#  GITHUB_ACCESS_TOKEN:
#    secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
#  GITHUB_EMAIL:
#    secure: wcfqCHOmeRLZf/BX6u6qQSV89Q4jFs9fHNDgMpKAcqE=

# Setup build version
install:
  - ps: ./build/setup-build.ps1

# Assembly infos & csproj patching
assembly_info:
  patch: true
  file: '**\\AssemblyInfo.*'
  assembly_version: '$(Build_Assembly_Version)'
  assembly_file_version: '$(Build_Assembly_Version)'
  assembly_informational_version: '$(Build_Version)'

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '$(Build_Assembly_Version)'
  package_version: '$(Build_Version)'
  assembly_version: '$(Build_Assembly_Version)'
  file_version: '$(Build_Assembly_Version)'
  informational_version: '$(Build_Version)'

# Build configurations
platform:
  - Any CPU

configuration:
  - Release

matrix:
  fast_finish: true

# Build
before_build:
# NuGet restore
  - nuget restore -verbosity detailed

build:
  verbosity: minimal

build_script:
  - msbuild

#test_script:
## Test & generate coverage report
#  - ps: >-
#      $nunitFolder = (Resolve-Path "tools\NUnit.ConsoleRunner.*\tools").ToString();
#      $nunitConsole = (Resolve-Path "$nunitFolder\nunit3-console.exe").ToString();
#
#      # Only take test assemblies matching their folder name
#      # Example:
#      # Directory = tests\TestProject.Tests\bin\CONFIGURATION\TARGET
#      # Directory.Parent = tests\TestProject.Tests\bin\CONFIGURATION
#      # Directory.Parent.Parent = tests\TestProject.Tests\bin
#      # Directory.Parent.Parent.Parent = tests\TestProject.Tests
#
#      $testAssemblies = (ls tests\*.Tests\bin\$env:Configuration\net461\*Tests.dll | Where-Object { $_ -Match "net*" -and $_ -NotMatch "netcoreapp*" -and [System.IO.Path]::GetFileNameWithoutExtension($_.FullName) -Match $_.Directory.Parent.Parent.Parent.Name } | % FullName | sort-object -Unique);
#
#      $testsPassed = $false;
#      if ($env:IsFullIntegrationBuild -eq $true)
#      {
#          $opencover = (Resolve-Path "tools\OpenCover.*\tools\OpenCover.Console.exe").ToString();
#          $coveralls = (Resolve-Path "tools\csmacnz.Coveralls.exe").ToString();
#
#          & $opencover -register:Path64 -filter:"+[*]* -[*.Test*]* -[*]JetBrains.Annotations*" -excludebyfile:"*\Dgml.cs;*\SortedSet.cs;*\BitHelper.cs" -hideskipped:File -target:"$nunitConsole" -targetargs:"$testAssemblies --result=\`"TestResult.xml\`" --where \`"cat != VerboseTest and cat != CISkip\`"" -returntargetcode -log:Warn -output:coverage.xml;
#          $testsPassed = $?;
#
#          & $sonarScanner end /d:"sonar.login=$env:SONARQUBE_TOKEN"
#
#          & $coveralls --opencover -i coverage.xml --repoToken $env:COVERALLS_REPO_TOKEN --useRelativePaths --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_BUILD_NUMBER --serviceName appveyor
#      }
#      else
#      {
#          & $nunitConsole $testAssemblies --where "cat != VerboseTest and cat != CISkip";
#          $testsPassed = $?;
#      }
#
#      # Upload results to AppVeyor
#
#      $wc = New-Object 'System.Net.WebClient';
#      $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit3/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestResult.xml));
#
#      if (!$testsPassed)
#      {
#          throw "Unit tests failed";
#      }

# Artifacts
artifacts:
  - path: '**\bin\Release\*.nupkg'
    name: NuGet
  - path: '**\bin\Release\*.snupkg'
    name: NuGet symbols

## Documentation
#before_deploy:
## Release documentation
#  - ps: ./build/releaseDoc.ps1
#
## Deploy
#deploy:
## MyGet
#  - provider: NuGet
#    server: https://www.myget.org/F/kernelith-ci/api/v2/package
#    symbol_server: https://www.myget.org/F/kernelith-ci/symbols/api/v2/package
#    api_key:
#      secure: ANF+joC2B+NahxCFbLPOjNvEAo36F2F4QJu6zLwoIf2I9KwkxKyCSuNxDpLmJmtU
#    on:
#      configuration: Release
## GitHub packages
#  - provider: NuGet
#    server: https://nuget.pkg.github.com/KeRNeLith/index.json
#    username: KeRNeLith
#    api_key:
#      secure: 6N37NtnuKSzKQXlPOCtPSFJGOvJUdJjPK8LcuWx2PjHs2WVdngenZvYixk6br72b
#    skip_symbols: true
#    artifact: NuGet
#    on:
#      configuration: Release
#      APPVEYOR_REPO_TAG: true
## NuGet
#  - provider: NuGet
#    api_key:
#      secure: zP8NG9npOCKDveAxWgK3a2Nb95gE5tk08i5ksxQKJpzqg0WsbOsK6vfxUjsjmlM+
#    on:
#      configuration: Release
#      APPVEYOR_REPO_TAG: true
## GitHub
#  - provider: GitHub
#    auth_token:
#      secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
#    release: '${APPVEYOR_REPO_TAG_NAME}'
#    description: 'Version ${Release_Name}'
#    draft: false
#    prerelease: false
#    force_update: true
#    on:
#      configuration: Release
#      APPVEYOR_REPO_TAG: true