{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create Macro Template",
    "Resources": {
        "TransformExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "TransformFunctionPermissions": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TransformFunction",
                        "Arn"
                    ]
                },
                "Principal": "cloudformation.amazonaws.com"
            }
        },
        "TransformFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nimport copy\n\ndef handler(event, context):\n\n  # Globals\n  region = event['region']\n  accountId = event['accountId']\n  fragment = event['fragment']\n  transformId = event['transformId']\n  params = event['params']\n  requestId = event['requestId']\n  templateParameterValues = event['templateParameterValues']\n\n  ec2 = boto3.client('ec2', region_name=region)\n\n  # Retrieves availability zones for this region\n  response = ec2.describe_availability_zones()\n  AZs = response['AvailabilityZones']\n\n  #Grab resources that need to be duplicated\n  VPCPubSn1 = fragment['Resources']['VPCPubSn1']\n  VPCPrivSn1 = fragment['Resources']['VPCPrivSn1']\n  PubSnRtAssoc1 = fragment['Resources']['VPCPubSn1RtAssoc']\n  PubSnRtAssoc1 = fragment['Resources']['VPCPrivSn1RtAssoc']\n\n  #iterate and add new resources\n  for i in range(1,len(AZs)+1): # Create a range from 1 - total number of AZs\n    if not i == 1:   # Only add resources if there is more than 1 AZ\n\n      # Create new Public Subnet based of VPCPubSN1\n      fragment['Resources']['VPCPubSn' + str(i)] = copy.deepcopy(VPCPubSn1)\n      fragment['Resources']['VPCPubSn' + str(i)]['Properties']['CidrBlock']['Fn::Select'][0] = i - 1\n      fragment['Resources']['VPCPubSn' + str(i)]['Properties']['AvailabilityZone']['Fn::Select'][0] = str(i - 1)\n\n      # Create new Private Subnet based of VPCPrivSN1\n      fragment['Resources']['VPCPrivSn' + str(i)] = copy.deepcopy(VPCPrivSn1)\n      fragment['Resources']['VPCPrivSn' + str(i)]['Properties']['CidrBlock']['Fn::Select'][0] = len(AZs) + i - 1\n      fragment['Resources']['VPCPrivSn' + str(i)]['Properties']['AvailabilityZone']['Fn::Select'][0] = str(i - 1)\n\n      # Create Public RT Association\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc'] = {}\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Type'] = 'AWS::EC2::SubnetRouteTableAssociation'\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Properties'] = {}\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Properties']['RouteTableId'] = {}\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Properties']['RouteTableId']['Ref'] = 'VPCPubRt1'\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Properties']['SubnetId'] = {}\n      fragment['Resources']['VPCPubSn' + str(i) + 'RtAssoc']['Properties']['SubnetId']['Ref'] = 'VPCPubSn' + str(i)\n\n      # Create Private RT Association\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc'] = {}\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Type'] = 'AWS::EC2::SubnetRouteTableAssociation'\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Properties'] = {}\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Properties']['RouteTableId'] = {}\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Properties']['RouteTableId']['Ref'] = 'VPCPrivRt1'\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Properties']['SubnetId'] = {}\n      fragment['Resources']['VPCPrivSn' + str(i) + 'RtAssoc']['Properties']['SubnetId']['Ref'] = 'VPCPrivSn' + str(i)\n\n  r = {}\n  r['requestId'] = requestId\n  r['status'] = 'SUCCESS'\n  r['fragment'] = fragment\n\n  return r\n"
                },
                "Handler": "index.handler",
                "Runtime": "python3.6",
                "Timeout": "60",
                "Role": {
                    "Fn::GetAtt": [
                        "TransformExecutionRole",
                        "Arn"
                    ]
                }
            }
        },
        "Transform": {
            "Type": "AWS::CloudFormation::Macro",
            "Properties": {
                "Name": "CreateSubnetsPerAZ",
                "Description": "Macro to create Subnets for every available AZ",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TransformFunction",
                        "Arn"
                    ]
                }
            }
        }
    }
}