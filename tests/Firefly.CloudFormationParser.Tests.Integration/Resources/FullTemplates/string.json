{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "TransformExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "TransformFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "import traceback\n\n\ndef handler(event, context):\n    response = {\n        \"requestId\": event[\"requestId\"],\n        \"status\": \"success\"\n    }\n    try:\n        operation = event[\"params\"][\"Operation\"]\n        input = event[\"params\"][\"InputString\"]\n        no_param_string_funcs = [\"Upper\", \"Lower\", \"Capitalize\", \"Title\", \"SwapCase\"]\n        if operation in no_param_string_funcs:\n            response[\"fragment\"] = getattr(input, operation.lower())()\n        elif operation == \"Strip\":\n            chars = None\n            if \"Chars\" in event[\"params\"]:\n                chars = event[\"params\"][\"Chars\"]\n            response[\"fragment\"] = input.strip(chars)\n        elif operation == \"Replace\":\n            old = event[\"params\"][\"Old\"]\n            new = event[\"params\"][\"New\"]\n            response[\"fragment\"] = input.replace(old, new)\n        elif operation == \"MaxLength\":\n            length = int(event[\"params\"][\"Length\"])\n            if len(input) <= length:\n                response[\"fragment\"] = input\n            elif \"StripFrom\" in event[\"params\"]:\n                if event[\"params\"][\"StripFrom\"] == \"Left\":\n                    response[\"fragment\"] = input[len(input)-length:]\n                elif event[\"params\"][\"StripFrom\"] != \"Right\":\n                    response[\"status\"] = \"failure\"\n            else:\n                response[\"fragment\"] = input[:length]\n        else:\n            response[\"status\"] = \"failure\"\n    except Exception as e:\n        traceback.print_exc()\n        response[\"status\"] = \"failure\"\n        response[\"errorMessage\"] = str(e)\n    return response\n"
                },
                "Handler": "index.handler",
                "Runtime": "python3.6",
                "Role": {
                    "Fn::GetAtt": [
                        "TransformExecutionRole",
                        "Arn"
                    ]
                }
            }
        },
        "TransformFunctionPermissions": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TransformFunction",
                        "Arn"
                    ]
                },
                "Principal": "cloudformation.amazonaws.com"
            }
        },
        "Transform": {
            "Type": "AWS::CloudFormation::Macro",
            "Properties": {
                "Name": "String",
                "Description": "Provides various string processing functions",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TransformFunction",
                        "Arn"
                    ]
                }
            }
        }
    }
}